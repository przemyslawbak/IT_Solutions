<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="angular" xml:space="preserve">
    <value>Możemy stworzyć SPA przy wykorzystaniu frameworku Angular. Pozwala on na przyjemniejsze korzystanie ze strony. Angular to oparty na języku TypeScript framework typu open source rozwijana przez zespół Angular w Google oraz społeczność osób i korporacji. Angular jest całkowicie przepisany przez ten sam zespół, który zbudował AngularJS.</value>
  </data>
  <data name="backend" xml:space="preserve">
    <value>Jeśli potrzebujesz oprogramowania które usprawni Twoją codzienną pracę, lub pracę Twojej firmy? A może chcesz ulepszyć albo rozwinąć obecne systemy? Jesteśmy w stanie Ci dostarczyć aplikacje  backendowe którę będą spełniać Twoje wymagania.</value>
  </data>
  <data name="Backend applications" xml:space="preserve">
    <value>Aplikacje backendowe</value>
  </data>
  <data name="business" xml:space="preserve">
    <value>Jeśli szukasz kogoś kto wykona Ci internetową stonę wizytówkę, lub aplikację webową, która będzie wyglądać dobrze także na urządzeniach mobilnych, dedykowaną specjalnie dla Twojego biznesu i wykonaną według Twoich wymagań, możemy Ci ją zaprojektować, stworzyć od podstaw, lub rozwinąć istniejące rozwiązanie z którego korzystasz.</value>
  </data>
  <data name="Business websites" xml:space="preserve">
    <value>Strony dla biznesu</value>
  </data>
  <data name="console" xml:space="preserve">
    <value>Czasami klient potrzebuje prostej aplikacji bez wyszukanego interfejsu użytkownika, kóre będzie wykonywało obliczenia lub operacje na plikach. Do tego celu spisują się świenie aplikacje konsolowe uruchamiane na lokalnych maszynach z prostym i wygodnym starowaniem. Jesteśmy w stanie wykonać Ci taką na zlecenie.</value>
  </data>
  <data name="Console applications" xml:space="preserve">
    <value>Aplikacje konsolowe</value>
  </data>
  <data name="core" xml:space="preserve">
    <value>Pracujemy z ASP.NET Core. Jest to darmowy framework o otwartym kodzie źródłowym i następczyni ASP.NET, opracowana przez firmę Microsoft. Jest to modułowa struktura, która działa zarówno na pełnym .NET Framework, w systemie Windows, jak i na wieloplatformowym .NET Core. Idealne rozwiązanie zarówno dla korporacji jak i małego biznesu.</value>
  </data>
  <data name="desktop" xml:space="preserve">
    <value>Desktopowa aplikacja okienkowa jest to program, który można uruchomić na komputerze w celu wykonania określonego zadania przez użytkownika końcowego. Jesteśmy w stanie zaprojektować i dostarczyć Ci taką plaikację stworzoną wedługo Twoich wytycznych oraz wymagań.</value>
  </data>
  <data name="mssql" xml:space="preserve">
    <value>W naszyh projektach korzystamy z Microsoft SQL Server. Jest to niezawodny system zarządzania relacyjnymi bazami danych opracowany przez firmę Microsoft. Jako serwer bazy danych jest to oprogramowanie, którego podstawową funkcją jest przechowywanie i pobieranie danych zgodnie z wymaganiami innych aplikacji, które mogą działać na tym samym komputerze lub na innym komputerze w sieci.</value>
  </data>
  <data name="outsourcing" xml:space="preserve">
    <value>Jesteśmy gotowi na współpracę z Twoją firmą zarówno w implementacji całych projektów, jak i jedynie jego poszczególnych części, wykorzystując technologie w których pracujemy.</value>
  </data>
  <data name="Outsourcing_" xml:space="preserve">
    <value>Outsourcing</value>
  </data>
  <data name="rest" xml:space="preserve">
    <value>Na życzenie tworzymy RESTful Web API. Restful Web Services to uproszczona, łatwa w utrzymaniu i skalowalna usługa oparta na architekturze REST. Restful Web Service, udostępniaj interfejs API z aplikacji w bezpieczny, jednolity, bezstanowy sposób wywołującej aplikacji klienckiej.</value>
  </data>
  <data name="RESTful Web Apis" xml:space="preserve">
    <value>RESTful Web Apis</value>
  </data>
  <data name="uiux" xml:space="preserve">
    <value>Zajmujemy się projektowaniem wyglądu i interfejsów dla różnych aplikacji, począwszy od aplikacji webowych, przez mobilne, po programy uruchamiane na lokalnych maszynach, wszysto ze współpracą z klientem.</value>
  </data>
  <data name="UiUx Design" xml:space="preserve">
    <value>Projektowanie interfejsów użytkownika</value>
  </data>
  <data name="web" xml:space="preserve">
    <value>Aplikacja internetowa Jest to aplikacja działająca na serwerze sieciowym, w przeciwieństwie do programów komputerowych uruchamianych lokalnie w systemie operacyjnym (OS) urządzenia. Użytkownik uzyskuje dostęp do aplikacji internetowych za pośrednictwem przeglądarki internetowej z aktywnym połączeniem sieciowym. Jesteśmy gotowi do tworzenia i utrzymywania różnego rodzaju responsywnych aplikacji internetowych, które przygotowane do wyświetlenia w przeglądarkach urządzeń mobilnych.</value>
  </data>
  <data name="Web applications" xml:space="preserve">
    <value>Aplikacje webowe</value>
  </data>
  <data name="Windows desktop applications" xml:space="preserve">
    <value>Aplikacje okienkowe dla Window</value>
  </data>
  <data name="wpf" xml:space="preserve">
    <value>Windows Presentation Foundation służy nam do tworzenia aplikacji desktopowych oraz klientów Web API. Jest to darmowy podsystem graficzny typu open source, pierwotnie opracowany przez firmę Microsoft do renderowania interfejsów użytkownika w aplikacjach opartych na systemie Windows.</value>
  </data>
</root>